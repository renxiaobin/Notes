SQL分类：
DDL（Data Definition Language）——数据定义语言：CREAT,ALERT,DROP,DECLARE
DML（Data Manipulation Language）——数据操作语言：SELECT,DELETE,UPDATE,INSERT
DCL（Data Control Language）——数据控制语言：GRANT,REVOKE,COMMIT,ROLLBACK

创建数据库：CREATE DATABASE db-name;
删除数据库：DROP DATABASE db-name;
创建表：CREATE TABLE table-name (col1 type1 [not null] [primary key],...);
删除表：DROP TABLE table-name;

外连接：
left outer join左外连接（左连接）：结果集不仅包括连接表的匹配行，也包括左连接表的所有行；
right outer join右外连接（右连接）：结果集不仅包括连接表的匹配行，也包括右连接表的所有行；
full outer join全外连接：结果集不仅包括连接表的匹配行，也包括两个连接表的所有行；

三大范式：
1.每一列都是不可分割的基本数据项（确保每列的原子性）；
2.每个实例或行可以被唯一区分（确保每列都和主键相关）；
3.表中不包含已在其他表中出现的非主键的信息（确保列和主键直接相关，非间接相关）。

索引：
对数据库表中的一个列或多个列的值进行排序的结构，索引有助于更快地获取信息（加快查找和排序）。

建立索引的条件：
1.在经常需要搜索的列上，可以加快搜索的速度；
2.在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；
3.在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；
4.在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；
5.在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；
6.在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。

不应该建立索引的情况：
1.对于那些在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度；相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。
2.对于那些只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。
3.对于那些定义为text, image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少,不利于使用索引。
4.当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改操作远远多于检索操作时，不应该创建索引。

事务：
是一系列的数据库操作，是数据库应用的基本逻辑单位。
特性（ACID）：
1.原子性（Atomicity）：不可分割，要么全部被执行，要么全部都不执行；
2.一致性（Consistency）：事务执行，使得数据库从保持一致的正确的状态（如只写入合法的数据）；
3.隔离性（Isolation）：事务提交前，不允许把修改的数据提供给其他并发事务；
4.持久性（Durability）：事务提交后，其结果永久保存在数据库中，即使出现故障也会被保存。

外键：
如果关系模式R1中的某属性集不是R1的主键，而是另一个关系R2的主键则该属性集是关系模式R1的外键，通常在数据库设计中缩写为FK；外键表示了两个关系之间的相关联系，以另一个关系的外键作主关键字的表被称为主表，具有此外键的表被称为主表的从表。
