1.接口的default关键字
Java8允许给接口添加一个非抽象的方法（有具体实现），只需要使用 default关键字即可，这个特征又叫做扩展方法，该方法当然也可以重写覆盖其实现
interface Formula {
    double calculate(int a);
    default double sqrt(int a) {
        return Math.sqrt(a);
    }
}

Formula formula = new Formula() {
    @Override
    public double calculate(int a) {
        return sqrt(a * 100);
    }
};
formula.calculate(100);     // 100.0
formula.sqrt(16);           // 4.0


2.Lambda表达式
使用表达式可以使得代码更加简洁
原先使用比较器匿名对象来排列字符串的方法
Collections.sort(names, new Comparator<String>() {
    @Override
    public int compare(String a, String b) {
        return b.compareTo(a);
    }
});
可以改成
Collections.sort(names, (String a, String b) -> {
    return b.compareTo(a);
});
函数体只有一行代码的，可以去掉大括号{}以及return关键字，变为
Collections.sort(names, (String a, String b) -> b.compareTo(a));
Java编译器可以自动推导出参数类型，所以可以不用再写一次类型，变为
Collections.sort(names, (a, b) -> b.compareTo(a));

3.函数式接口
仅仅只包含一个抽象方法的接口，每一个该类型的lambda表达式都会被匹配到这个抽象方法（因为上述的 default 方法不算抽象方法，所以也可以给函数式接口添加默认方法）给Interface添加 @FunctionalInterface 注解，然后通过lambda表达式当作任意只包含一个抽象方法的接口类型，此时有有注解的接口如果有多个抽象方法会报错（其实没有注解也可以正确运行，因为Java8之前就有将lambda表达式映射到一个单方法的接口上的实现了）
@FunctionalInterface
interface Converter<F, T> {
    T convert(F from);
}
Converter<String, Integer> converter = (from) -> Integer.valueOf(from);
Integer converted = converter.convert("123");
System.out.println(converted);    // 123

4.方法与构造函数引用
Java8允许使用 :: 关键字来传递方法或者构造函数的引用，如上面的代码可以改成
Converter<String, Integer> converter = Integer::valueOf;
Integer converted = converter.convert("123");
System.out.println(converted);   // 123
上面的代码展示了如何引用一个静态方法，当然也可以引用一个对象的方法
String something = new String("01234");
Converter<String, Integer> converter = something::indexOf;
Integer converted = converter.convert("123");
System.out.println(converted);   // 1
构造函数也可以使用::关键字来引用
class Person {
    String firstName;
    String lastName;
    Person() {}
    Person(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
}
interface PersonFactory<P extends Person> {
    P create(String firstName, String lastName);
}
PersonFactory<Person> personFactory = Person::new;
Person person = personFactory.create("Peter", "Parker");
只需要使用 Person::new 来获取Person类构造函数的引用，Java编译器会自动根据PersonFactory.create方法的签名来选择合适的构造函数

5.Lambda 作用域
在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似,可以直接访问标记了final的外层局部变量，或者实例的字段以及静态变量。

6.访问局部变量
可以直接在lambda表达式中访问外层的局部变量
final int num = 1;
Converter<Integer, String> stringConverter = (from) -> String.valueOf(from + num);
stringConverter.convert(2);     // 3
但是和匿名对象不同的是，这里的变量num可以不用声明为final
int num = 1;
Converter<Integer, String> stringConverter = (from) -> String.valueOf(from + num);
stringConverter.convert(2);     // 3
不过这里的num必须不可被后面的代码修改（即隐性的具有final的语义），不然就无法编译
int num = 1;
Converter<Integer, String> stringConverter = (from) -> String.valueOf(from + num);
num++;

7.访问对象字段与静态变量
和局部变量不同的是，lambda内部对于对象实例的字段以及静态变量是即可读又可写，该行为和匿名对象是一致的
class LambdaTest {
    static int outerStaticNum;
    int outerNum;
    void testScopes() {
        Converter<Integer, String> stringConverter1 = (from) -> {
            outerNum = 23;      //ok
            return String.valueOf(from);
        };
        Converter<Integer, String> stringConverter2 = (from) -> {
            outerStaticNum = 72;        //ok
            return String.valueOf(from);
        };
    }
}

8.访问接口的默认方法
Lambda表达式中是无法访问到接口的default方法的，不然无法通过编译
Formula formula = (a) -> sqrt( a * 100);
JDK 1.8 API包含了很多内建的函数式接口，在旧版本的Java中常用到的比如Comparator或者Runnable接口，这些接口都增加了@FunctionalInterface注解以便能用在lambda上。
Java 8 API同样还提供了很多全新的函数式接口来让工作更加方便，有一些接口是来自Google Guava库里的，即便你对这些很熟悉了，还是有必要看看这些是如何扩展到lambda上使用的

9.Date API
Java 8 在包java.time下包含了一组全新的时间日期API。新的日期API和开源的Joda-Time库差不多，但又不完全一样

10.Annotation 注解
在Java 8中支持多重注解了，现在把同一个类型的注解使用多次，只需要给该注解标注一下@Repeatable即可
@interface Hints {
    Hint[] value();
}
@Repeatable(Hints.class)
@interface Hint {
    String value();
}
@Hint("hint1")
@Hint("hint2")
class Person {}
