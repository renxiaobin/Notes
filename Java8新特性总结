1.接口的default关键字
Java8允许给接口添加一个非抽象的方法（有具体实现），只需要使用 default关键字即可，这个特征又叫做扩展方法，该方法当然也可以重写覆盖其实现
interface Formula {
    double calculate(int a);
    default double sqrt(int a) {
        return Math.sqrt(a);
    }
}

Formula formula = new Formula() {
    @Override
    public double calculate(int a) {
        return sqrt(a * 100);
    }
};
formula.calculate(100);     // 100.0
formula.sqrt(16);           // 4.0


2.Lambda表达式
使用表达式可以使得代码更加简洁
原先使用比较器匿名对象来排列字符串的方法
Collections.sort(names, new Comparator<String>() {
    @Override
    public int compare(String a, String b) {
        return b.compareTo(a);
    }
});
可以改成
Collections.sort(names, (String a, String b) -> {
    return b.compareTo(a);
});
函数体只有一行代码的，可以去掉大括号{}以及return关键字，变为
Collections.sort(names, (String a, String b) -> b.compareTo(a));
Java编译器可以自动推导出参数类型，所以可以不用再写一次类型，变为
Collections.sort(names, (a, b) -> b.compareTo(a));

3.函数式接口
给Interface添加 @FunctionalInterface 注解，然后可以使用lambda表达式当作任意只包含一个抽象方法的接口类型
