一 finally语句块一定执行吗？
不一定
1.在相应的try语句块执行之前，return或抛出异常，finally不会执行
2.在 try 语句块中执行了 System.exit (0) 语句，终止了 Java 虚拟机的运行，finally也不会执行
3.当一个线程在执行 try 语句块或者 catch 语句块时被打断（interrupted）或者被终止（killed），finally也不会执行
4.在线程运行 try 语句块或者 catch 语句块时，突然死机或者断电，finally也不会执行

二 finally语句的执行顺序
finally 语句块是在 try 或者 catch 中的 return 语句（控制转移语句）之前执行的
public class Test { 
  public static void main(String[] args) {  
    System.out.println("reture value of test() : " + test()); 
  } 
	
	public static int test(){ 
	  int i = 1; 
		try {  
      System.out.println("try block");  
			i = 1 / 0; 
      return 1;  
    }catch (Exception e){ 
      System.out.println("exception block"); 
      return 2; 
    }finally {  
      System.out.println("finally block");  
		} 
	} 
}

执行结果：
try block
exception block
finally block
reture value of test() :2

三 finally语句在JVM中的具体编译顺序
Java 虚拟机会把 finally 语句块作为 subroutine 直接插入到 try 语句块或者 catch 语句块的控制转移语句之前。但是，在执行 subroutine（也就是 finally 语句块）之前，try 或者 catch 语句块会保留其返回值（return的值）到本地变量表（Local Variable Table）中。待 subroutine 执行完毕之后，再恢复保留的返回值到操作数栈中，然后通过 return 或者 throw 语句将其返回给该方法的调用者（invoker），所以下面的代码执行结果和我们预期的不一样（注意：本地变量表只是存储return语句中的变量，若无return语句，则不保留）
public class Test { 
  public static void main(String[] args) { 
    System.out.println("return value of getValue(): " + getValue()); 
	} 

  public static int getValue() { 
    int i = 1; 
    try { 
      return i; 
    } finally { 
      i++; 
    } 
	} 
}

预期结果：
return value of getValue(): 2
实际结果：
return value of getValue(): 1

四 以下代码执行结果，由于 return test1(); 语句相当于 String tmp = test1(); return tmp; 所以先输出了 return statement 才是 finally block

public class Test { 
  public static void main(String[] args) {  
    System.out.println(test());  
  }
  public static String test() {  
    try {  
      System.out.println("try block");  
      return test1();  
    } finally {  
      System.out.println("finally block");  
		}  
	}  
  public static String test1() {  
    System.out.println("return statement");  
    return "after return";  
	}  
}

执行结果：
try block
return statement
finally block
after return
