1.前序遍历（先序遍历）
二叉树遍历的一种，遍历顺序：根-左-右

//节点定义
public class TreeNode{
  int value；
  TreeNode left；
  TreeNode right；
  public TreeNode(int v){
    value = v;
  }
}
//递归遍历
public void pre(TreeNode biTree){
  System.out.println(biTree.value);
  TreeNode leftTree = biTree.left;
  if(leftTree != null){
    pre(leftTree);
  }
  TreeNode rightTree = biTree.right;
  if(rightTree != null){
    pre(rightTree);
  }
}
//非递归遍历
public void pre(TreeNode biTree){
  Stack<TreeNode> stack = new Stack<TreeNode>();
  while(biTree != null || !stack.isEmpty()){
    while(biTree != null){
      System.out.println(biTree.value);
      stack.push(biTree);
      biTree = biTree.left;
    }
    if(!stack.isEmpty()){
      biTree = stack.pop();
      biTree = biTree.right;
    }
  }
}
  
2.中序遍历
遍历顺序：左-根-右

//递归遍历
public void mid(TreeNode biTree){
  TreeNode leftTree = biTree.left;
  if(leftTree != null){
    mid(leftTree);
  }
  System.out.println(biTree.value);
  TreeNode rightTree = biTree.right;
  if(rightTree != null){
    mid(rightTree);
  }
}
//非递归遍历
public void mid(TreeNode biTree){
  Stack<TreeNode> stack = new Stack<TreeNode>();
  while(biTree != null || !stack.isEmpty()){
    while(biTree != null){
      stack.push(biTree);
      biTree = biTree.left;
    }
    if(!stack.isEmpty()){
      biTree = stack.pop();
      System.out.println(biTree.value);
      biTree = biTree.right;
    }
  }
}

3.后序遍历
遍历顺序：左-右-根

//递归遍历
public void pos(TreeNode biTree){
  if(biTree == null){
    return ;
  }
  TreeNode leftTree = biTree.left;
  pos(leftTree);
  TreeNode rightTree = biTree.right;
  pos(rightTree);
  System.out.println(biTree.value);
}
//非递归遍历
public void pos(TreeNode biTree){
  Stack<TreeNode> stack = new Stack<TreeNode>();
  TreeNode current;
  TreeNode last;
  stack.push(biTree);
  while(!stack.isEmpty()){
    current = stack.pop();
    if((current.left == null && current.right == null) || (last!=null && (last==current.left || last==current.right))){
      System.out.println(current.value);
      last = current;
    }else{
      if(current.right != null){
        stack.push(current.right);
      }
      if(current.left != null){
        stack.push(current.left);
      }
    }
  }
}
