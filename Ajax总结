Ajax：
全称是Asynchronous JavaScript and XML，其中，Asynchronous 是“异步”的意思，它有别于传统web开发中采用的同步的方式。

同步和异步：（引用，还没完全明白）
异步传输是面向字符的传输，它的单位是字符；而同步传输是面向比特的传输，它的单位是桢，它传输的时候要求接受方和发送方的时钟是保持一致的。
具体来说，异步传输是将比特分成小组来进行传送。一般每个小组是一个8位字符，在每个小组的头部和尾部都有一个开始位和一个停止位，它在传送过程中接收方和发送方的时钟不要求一致，也就是说，发送方可以在任何时刻发送这些小组，而接收方并不知道它什么时候到达。一个最明显的例子就是计算机键盘和主机的通信，按下一个键的同时向主机发送一个8比特位的ASCII代 码，键盘可以在任何时刻发送代码，这取决于用户的输入速度，内部的硬件必须能够在任何时刻接收一个键入的字符。这是一个典型的异步传输过程。异步传输存在 一个潜在的问题，即接收方并不知道数据会在什么时候到达。在它检测到数据并做出响应之前，第一个比特已经过去了。这就像有人出乎意料地从后面走上来跟你说 话，而你没来得及反应过来，漏掉了最前面的几个词。因此，每次异步传输的信息都以一个起始位开头，它通知接收方数据已经到达了，这就给了接收方响应、接收 和缓存数据比特的时间；在传输结束时，一个停止位表示该次传输信息的终止。按照惯例，空闲（没有传送数据）的线路实际携带着一个代表二进制1的信号。步传输的开始位使信号变成0，其他的比特位使信号随传输的数据信息而变化。最后，停止位使信号重新变回1，该信号一直保持到下一个开始位到达。例如在键盘上数字“1”，按照8比特位的扩展ASCII编码，将发送“00110001”，同时需要在8比特位的前面加一个起始位，后面一个停止位。
同步传输的比特分组要大得多。它不是独立地发送每个字符，每个字符都有自己的开始位和停止位，而是把它们组合起来一起发送。我们将这些组合称为数据帧，或简称为帧。
　　数据帧的第一部分包含一组同步字符，它是一个独特的比特组合，类似于前面提到的起始位，用于通知接收方一个帧已经到达，但它同时还能确保接收方的采样速度和比特的到达速度保持一致，使收发双方进入同步。
　　帧的最后一部分是一个帧结束标记。与同步字符一样，它也是一个独特的比特串，类似于前面提到的停止位，用于表示在下一帧开始之前没有别的即将到达的数据了。
　　同步传输通常要比异步传输快速得多。接收方不必对每个字符进行开始和停止的操作。一旦检测到帧同步字符，它就在接下来的数据到达时接收它们。另外，同步传输的开销也比较少。例如，一个典型的帧可能有500字节（即4000比特）的数据，其中可能只包含100比特的开销。这时，增加的比特位使传输的比特总数增加2.5%，这与异步传输中25 %的增值要小得多。随着数据帧中实际数据比特位的增加，开销比特所占的百分比将相应地减少。但是，数据比特位越长，缓存数据所需要的缓冲区也越大，这就限制了一个帧的大小。另外，帧越大，它占据传输媒体的连续时间也越长。在极端的情况下，这将导致其他用户等得太久。
     了解了同步和异步的概念之后，大家应该对ajax为什么可以提升用户体验应该比较清晰了，它是利用异步请求方式的。打个比方，如果现在你家里所在的小区因 某种情况而面临停水，现在有关部门公布了两种方案，一是完全停水8个小时，在这8个小时内完全停水，8个小时后恢复正常。二是不完全停水10 个小时，在这10个小时内水没有完全断，只是流量比原来小了很多，在10个小时后恢复正常流量，那么，如果是你你会选择哪种方式呢？显然是后者。

Ajax包含的技术：
1.使用CSS和XHTML来表示。
2.使用DOM模型来交互和动态显示。
3.使用XMLHttpRequest来和服务器进行异步通信。
4.使用JavaScript来绑定和调用。

Ajax原理：
总的来说，通过XMLHttpRequest对象向服务器发送异步请求，接收服务器返回的数据，然后使用JavaScript操作DOM更新内容。
其中XMLHttpRequest是Ajax的核心机制，它是一种支持异步请求的技术，使得JavaScript可以及时向服务器发送请求和处理响应，但不会阻塞用户，达到了无刷新的效果。XMLHttpRequest具有以下属性：
1.readyState 对象状态值。XMLHttpRequest初次创建或被abort()方法重置时为0；open()方法调用但是没有调用send()方法时，即请求未被发送时为1；send()方法调用但未接收到响应时为2；响应头部接收已完成，但响应主体开始接收并未完成时为3；响应完成为4；除非请求处理过程中调用了abort()或者open()方法，否则其值不会递减；
2.onreadystatechange 状态值改变时触发事件的事件处理程序；
3.responseText 服务器返回数据的字符串形式；
4.responseXML 服务器返回的DOM兼容的文档数据对象；
5.status 服务器返回的状态码。1XX消息（请求被接受但还需要继续处理）、2XX请求成功、3XX重定向、4XX请求出错、5XX服务器出错；
6.statusText 伴随状态码的字符串信息。例如状态为200时为"OK"、404时为"Not Found"。
此外，XMLHttpRequest对象的创建在IE和其他浏览器之间存在着差异：
1.IE浏览器使用ActiveXObject，例xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
2.其他浏览器使用XMLHttpRequest，例xmlhttp = new XmlHttpRequest()；
创建完成后，调用open()方法进行HTTP请求，例xmlhttp.open("POST", url, true);第一个参数表明请求的类型，一般为POST或者GET；第二个参数包含请求的url地址以及可选的参数；第三个参数表明传输方式，ture和默认为异步，false为同步，在发出多个请求并且是有计划顺序时可能会需要指定同步方式；
此外需要指定onreadystatechange函数，来处理状态值改变时以及获取请求结果的操作，最后调用send()方法来发送请求。

Ajax优点：
1.页面无刷新，在页面内与服务器通信，良好的用户体验；
2.使用异步方式与服务器通信，不会打断用户的操作，具有更加迅速的响应能力；
3.可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本，并且Ajax的原则是“按需取数据”，可以最大程度的减少冗余请求，降低响应对服务器造成的负担；
4.基于标准化的并被广泛支持的技术，不需要下载插件或者小程序就可以使用。

Ajax缺点：
1.由于页面无刷新，页面不能后退，用户往往希望通过后退取消上一次的操作，而这个问题的解决办法较为复杂；
2.难以避免的安全问题，如跨站点脚本攻击、SQL注入攻击等；
3.对搜索引擎的支持较弱；
4.破坏程序的异常处理机制；
5.违背URL和资源定位的初衷；
6.对手持设备的支持有限；
7.客户端代码过多，复杂且容易出错，开发成本增加。
